<!DOCTYPE html>
<html>

	<head>
		<meta charset="UTF-8">
		<title></title>
		<meta name="viewport" content="width=device-width, initial-scale=1,maximum-scale=1,user-scalable=no">
		<meta name="apple-mobile-web-app-capable" content="yes">
		<meta name="apple-mobile-web-app-status-bar-style" content="black">
		<link rel="stylesheet" href="css/index.css">
		<link rel="stylesheet" href="css/public.css">
		<link rel="stylesheet" href="css/retread.css">
		<link rel="stylesheet" href="css/cell_list.css">
		<link rel="stylesheet" href="css/manager_home.css">
	</head>

	<body>
		<div id="div-cell_list" class="whole px-page">
			<div style="margin:20px 0px 20px 0px;width: 100%;height: 60px;">
				<div class="startCell tappable" style="margin-bottom: 20px;" id="startCell" data-action="startCell" data-type="0" placeholder="起始格口号"></div>
				<div style="font-size: 30px;float: left;margin-bottom: 20px;">至</div>
				<div class="endCell tappable" style="margin-bottom: 20px;" id="endCell" data-action="endCell" data-type="0" placeholder="结束格口号"></div>
				<button class="readbook tappable" style="margin-bottom: 20px;" data-action="read">一键检测</button>
			</div>
			<p id="progress" style="font-size: 30px;float: left;"></p>
			<button class="readbook tappable" style="margin-bottom: 20px;" data-action="stop">暂停</button>

			<div class="gly_sk">
				<ul class="ListMain" id="cellList"></ul>
				<div class="clear"></div>
			</div>
			<div class="hjw_pagefoot">
				<div class="foot_bm">
					<span class="img_retreat tappable" data-action="cellList_retreat"></span>
					<span class="img_center" id="cellListSetPage">1/2</span>
					<span class="img_forward  tappable" data-action="cellList_forward"></span>
				</div>
			</div>
			<div id="keyboardArea" style="width: 1080px;display: none;" class="keyboardArea tappable" data-action="clearKeyCss">
				<ul class="keyboardul" style="width: 900px;" id="keyboardul">
					<li class="key tappable" data-action="keyboard" data-value="1">1</li>
					<li class="key tappable" data-action="keyboard" data-value="2">2</li>
					<li class="key tappable" data-action="keyboard" data-value="3">3</li>
					<li class="key tappable" data-action="keyboard" data-value="4">4</li>
					<li class="key tappable" data-action="keyboard" data-value="5">5</li>
					<li class="key tappable" data-action="keyboard" data-value="6">6</li>
					<li class="key tappable" data-action="keyboard" data-value="7">7</li>
					<li class="key tappable" data-action="keyboard" data-value="8">8</li>
					<li class="key tappable" data-action="keyboard" data-value="9">9</li>
					<li class="key tappable" data-action="keyboard" data-value="0">0</li>

					<li class="key tappable" data-action="keyboard" data-value="Q">Q</li>
					<li class="key tappable" data-action="keyboard" data-value="W">W</li>
					<li class="key tappable" data-action="keyboard" data-value="E">E</li>
					<li class="key tappable" data-action="keyboard" data-value="R">R</li>
					<li class="key tappable" data-action="keyboard" data-value="T">T</li>
					<li class="key tappable" data-action="keyboard" data-value="Y">Y</li>
					<li class="key tappable" data-action="keyboard" data-value="U">U</li>
					<li class="key tappable" data-action="keyboard" data-value="I">I</li>
					<li class="key tappable" data-action="keyboard" data-value="O">O</li>
					<li class="key tappable" data-action="keyboard" data-value="P">P</li>
					<li class="key tappable" data-action="keyboard" data-value="A">A</li>
					<li class="key tappable" data-action="keyboard" data-value="S">S</li>
					<li class="key tappable" data-action="keyboard" data-value="D">D</li>
					<li class="key tappable" data-action="keyboard" data-value="F">F</li>
					<li class="key tappable" data-action="keyboard" data-value="G">G</li>
					<li class="key tappable" data-action="keyboard" data-value="H">H</li>
					<li class="key tappable" data-action="keyboard" data-value="J">J</li>
					<li class="key tappable" data-action="keyboard" data-value="K">K</li>
					<li class="key tappable" data-action="keyboard" data-value="L">L</li>
					<li class="key tappable" data-action="keyboard" data-value="backspace">
						<div class="backspace1"></div>
						<div class="backspace2">x</div>
					</li>//退格
					<li style="visibility: hidden;"></li>
					<li class="key tappable" data-action="keyboard" data-value="Z">Z</li>
					<li class="key tappable" data-action="keyboard" data-value="X">X</li>
					<li class="key tappable" data-action="keyboard" data-value="C">C</li>
					<li class="key tappable" data-action="keyboard" data-value="V">V</li>
					<li class="key tappable" data-action="keyboard" data-value="B">B</li>
					<li class="key tappable" data-action="keyboard" data-value="N">N</li>
					<li class="key tappable" data-action="keyboard" data-value="M">M</li>
					<li style="background:#4C5B78 url(images/key_up.png) no-repeat center;" class="key tappable" data-action="keyboard" data-value="packUp"></li>//收起键盘
					<li style="visibility: hidden;"></li>
				</ul>
			</div>
			<div class="tappable back1_22" data-action="back">返回</div>
		</div>

		<script src="js/keyboard.js"></script>
		<script src="js/mui.min.js"></script>
		<script src="js/util.js"></script>
		<script src="js/check_cell.js"></script>
		<script src="js/public_functions.js"></script>
		<script src="js/md5.js"></script>
		<script src="js/api.js"></script>
		<script type="text/javascript" src="js/jquery-1.9.1.min.js"></script>

		<script>
			var countPerPage = 90;
			var currentPage = 1;
			var totalPage = 0;
			var nowCell;
			var startCell;
			var endCell;
			var bookCode = '';
			var doorState = '';
			var cell_data = [];

			var isStop = 'false';

			var progress = document.getElementById('progress');

			mui.plusReady(function() {
				cell_list_getCellList();
				updateCellStatusTest();
			});

			document.addEventListener('touchstart', function(event) {
				var target = event.target;
				var wrapper = util.dom.getWrapperByClass(target, "tappable");

				if(wrapper) {
					var _document = document,
						_localStorage = localStorage,
						wrapperDataset = wrapper.dataset;

					switch(wrapperDataset.action) {
						case "back":
							history.go(-1);
							window.location.href="manager_home.html";
							break;
						case "cellList_retreat":
							if(currentPage > 1) {
								currentPage--;
								cell_list_getCellList();
							}
							break;
						case "cellList_forward":
							if(currentPage < totalPage) {
								currentPage++;
								cell_list_getCellList();
							}
							break;
						case "keyboard":
							event.stopPropagation();
							clearLastKeyCss()
							changeCss(wrapper);
							keyboardOperation(writeInput, wrapperDataset.value);
							break;
						case "startCell":
							inputType = wrapperDataset.type;
							rmgb();
							addgb(wrapper);
							event.stopPropagation();
							document.getElementById("keyboardArea").style.display = "block";
							writeInput = _document.getElementById("startCell");
							break;
						case "endCell":
							inputType = wrapperDataset.type;
							rmgb();
							addgb(wrapper);
							event.stopPropagation();
							document.getElementById("keyboardArea").style.display = "block";
							writeInput = _document.getElementById("endCell");
							break;
						case "read":
							isStop = 'false';
							document.getElementById("keyboardArea").style.display = "none";
							readBook();
							break;
						case "clear":
							clearBook();
							break;
						case "stop":
							mui.confirm('是否暂停检测？', '微型图书馆', function(e) {
								isStop = 'true';
							});
							break;
					}
				}
			});

			function readBook() {
				startCell = document.getElementById('startCell').textContent;
				endCell = document.getElementById('endCell').textContent;
				public_readRFIDCheck(startCell);
			}

			/**
			 * RFID格口检测
			 * @param {Object} boxid
			 * @param {Object} toDo
			 */
			function public_readRFIDCheck(boxid) {
				if(isStop != 'false') {
					return;
				}
				nowCell = parseInt(boxid);
				progress.innerText = '当前读取到第' + nowCell + '号格口';
				var url = createBoxctrlServiceURL(interface_name.method_readRFID);
				var data = {
					boxid: nowCell
				};
				var success = function(response) {
					if(response.success == true && (response.data != '' || response.data != null)) {
						bookCode = response.data;
					} else {
						bookCode = '';
					}
					public_getDoorCheck(nowCell);
				};
				util.ajax.getJSON(url, data, success);
			}

			/*
			 * shelfNo： 格子id
			 */
			function public_getDoorCheck(shelfNo) {
				var url = createBoxctrlServiceURL(interface_name.method_getDoor);
				var data = {
					boxid: shelfNo
				};
				var success = function(response) {
					var doorState = '';
					switch(response.data) {
						case 'opened':
							doorState = '0';
							break;
						case 'closed':
							doorState = '1';
							break;
						case 'error':
							doorState = '2';
							break;
					}
					updateCellStatus(shelfNo, bookCode, doorState);
					if(parseInt(nowCell) < parseInt(endCell)) {
						nowCell++;
						public_readRFIDCheck(nowCell);
					} else {
						selfcheck();
					}
				};
				util.ajax.getJSON(url, data, success);
			}

			/**
			 * 储存从硬件获取到的数据
			 * @param {Object} cellNo
			 * @param {Object} bookCode
			 * @param {Object} doorState
			 */
			function updateCellStatus(cellNo, bookCode, doorState) {
				var cell = {
					cellNo: cellNo,
					bookCode: bookCode,
					doorState: doorState
				}
				cell_data.add(cell);
			}
			
			function updateCellStatusTest() {
				var cell = {
					cellNo: 001,
					bookCode: '',
					doorState: 0
				}
				cell_data.push(JSON.stringify(cell));
				cell = {
					cellNo: 002,
					bookCode: '',
					doorState: 1
				}
				cell_data.push(JSON.stringify(cell));
				cell = {
					cellNo: 003,
					bookCode: '',
					doorState: 2
				}
				cell_data.push(JSON.stringify(cell));
				cell = {
					cellNo: 004,
					bookCode: '',
					doorState: 0
				}
				cell_data.push(JSON.stringify(cell));
				cell = {
					cellNo: 005,
					bookCode: '',
					doorState: 1
				}
				cell_data.push(JSON.stringify(cell));
				cell = {
					cellNo: 006,
					bookCode: '3673239040',
					doorState: 1
				}
				cell_data.push(JSON.stringify(cell));
				cell = {
					cellNo: 007,
					bookCode: '',
					doorState: 1
				}
				cell_data.push(JSON.stringify(cell));
				cell = {
					cellNo: 008,
					bookCode: '',
					doorState: 0
				}
				cell_data.push(JSON.stringify(cell));
				cell = {
					cellNo: 009,
					bookCode: '',
					doorState: 0
				}
				cell_data.push(JSON.stringify(cell));
				cell = {
					cellNo: 010,
					bookCode: '',
					doorState: 0
				}
				cell_data.push(JSON.stringify(cell));
				cell = {
					cellNo: 011,
					bookCode: '3673068576',
					doorState: 2
				}
				cell_data.push(JSON.stringify(cell));
				cell = {
					cellNo: 012,
					bookCode: '3673237376',
					doorState: 0,
					}
				cell_data.push(JSON.stringify(cell));
				cell = {
					cellNo: 013,
					bookCode: '3673066720',
					doorState: 0
				}
				cell_data.push(JSON.stringify(cell));
				cell = {
					cellNo: 014,
					bookCode: '',
					doorState: 0
				}
				cell_data.push(JSON.stringify(cell));
				cell = {
					cellNo: 015,
					bookCode: '3673218576',
					doorState: 0
				}
				cell_data.push(JSON.stringify(cell));
				selfcheck();
			}

			/**
			 * 自检问题上报
			 */
			function selfcheck() {
				var url = createAjaxURL(interface_name.method_selfcheck);
				var data = {
					bookShelfId: public_getBookShelfId(),
					cell_data: cell_data,
					isReturn:'yes'
				}
				console.info(JSON.stringify(data));
				var success = function(response) {
					mui.toast(response.msg);
				}
				util.ajax.getJSONWaiting(url, data, success);
			}
		</script>
	</body>

</html>